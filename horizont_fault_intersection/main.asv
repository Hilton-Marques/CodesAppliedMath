clc;
clear;
close all;

[vertices, faces] = read_vtk_file("meshes/EMB_COMPLETO_160_145_ts.vtk");
a

function [vertices, faces] = read_vtk_file(filename)
% READ_VTK_FILE reads a .vtk file and returns the vertices and faces.
% Inputs:
%   filename - the name of the .vtk file
% Outputs:
%   vertices - a Nx3 matrix of vertex coordinates
%   faces - a Mx3 matrix of indices representing the triangular faces

% Open the file
fid = fopen(filename, 'r');
if (fid == -1)
    error(['Could not open file ', filename]);
end

% Find the header and read the format
header = fgetl(fid);
if (~strcmp(header, '# vtk DataFile Version 3.0'))
    error('Invalid .vtk file format');
end

format = fgetl(fid);
if (~strcmp(format, 'ASCII'))
    error('Only ASCII format is supported');
end

% Find the keyword 'POINTS'
points = fgetl(fid);
while (~strcmp(points, 'POINTS'))
    points = fgetl(fid);
end

% Read the number of vertices and allocate space for them
nv = sscanf(points, 'POINTS %d float');
vertices = zeros(nv, 3);

% Read the vertices
for i = 1:nv
    line = fgetl(fid);
    coords = sscanf(line, '%f %f %f');
    vertices(i, :) = coords';
end

% Find the keyword 'POLYGONS'
polygons = fgetl(fid);
while (~strcmp(polygons, 'POLYGONS'))
    polygons = fgetl(fid);
end

% Read the number of faces and allocate space for them
nf = sscanf(polygons, 'POLYGONS %d %d');
faces = zeros(nf, 3);

% Read the faces
for i = 1:nf
    line = fgetl(fid);
    indices = sscanf(line, '%d %d %d');
    faces(i, :) = indices(2:4)' + 1; % VTK indices are 0-based, Matlab indices are 1-based
end

% Close the file
fclose(fid);
end
