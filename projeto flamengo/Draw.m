classdef Draw < handle
    properties
        graph = [];
        table = [];
        m_hash_map = [];
        m_hash_map_format = [];
        m_hash_map_const = [];
    end
    methods
        function this = Draw(graph,table)
            this.graph = graph;
            this.table = table;
            this.BuildHashMap();
        end
        function draw(this,data)
            switch data.type
                case 'bar'
                    n = length(data.attributes); % number of atrributes
                    m = length(fieldnames(data.data)); % number of fields (players)
                    attributes = data.attributes;
                    players = fieldnames(data.data);
                    P = zeros(m,n); % matrix with data
                    %build P
                    for j = 1:m
                        values = data.data.(players{j});
                        fn_val = fieldnames(values);
                        for i = 1:n
                            P(j,i) = values.(fn_val{i});
                        end
                    end
                    this.table.RowName = attributes;
                    this.table.ColumnName = players;
                    formatSpec = '%.2f';
                    this.table.Data = compose(formatSpec,P');
                    this.RadarPlot(P',attributes,players,data.units);
                case 'xy'
                    y = data.curves.y_data;
                    formatSpec = '%.1f';
                    %draw table
                    this.table.ColumnName = data.y_axis;
                    if iscell(data.curves.x_data(1))
                        this.table.RowName = data.curves.x_data;
                    else
                        this.table.RowName = string(data.curves.x_data);
                    end
                    this.table.Data = compose(formatSpec,data.curves.y_data);
                    % if there is number of elements is greater than one
                    % draw a graph
                    if (length(data.curves.y_data)) > 1
                        %this.Reset();
                        
                        %axis(this.graph,'normal')
                        %axis(this.graph,'on')
                        if iscell(data.curves.x_data(1))
                            label = data.curves.x_data;
                            x = 1:length(y);
                        else
                            x = data.curves.x_data;
                            label = [x(1):x(end)];
                        end
                        plot(this.graph,x,y);
                        title(this.graph,data.title);
                        xlabel(this.graph,data.x_axis);
                        ylabel(this.graph,data.y_axis);
                        text(this.graph,x,y,compose(formatSpec,y),'HorizontalAlignment', 'left', ...
                            'VerticalAlignment', 'bottom');
                        xlim(this.graph,[x(1),x(end)]);
                        yValues = get(this.graph,'YLim');
                        ylim(this.graph,[yValues(1),yValues(end) + 50]);
                        xticks(this.graph,label);
                        this.graph.Interactions = [];
                        this.graph.Toolbar.Visible = 'off';
                        disableDefaultInteractivity(this.graph);
                    end
                    
            end
        end
        function RadarPlot(this,P,attributes, players,units)
            %this.Reset();
            axis(this.graph,'square');
            [M, N] = size(P);
            %%% Plot the axes
            % Radial offset per axis
            h = 2*pi / (M);
            th_row = -pi/2:h:3*pi/2;
            th_row_red = th_row(1:M);
            th = repmat(th_row_red, 2,1);
            %th = (2*pi/M)*(ones(2,1)*(M:-1:1));
            %th_row = linspace(2*pi, 0, M);
            % Axis start and end
            r = [0;1]*ones(1,M);
            % Conversion to cartesian coordinates to plot using regular plot.
            [x,y] = pol2cart(th, r);
            hLine = line(this.graph,x, y,...
                'LineWidth', 1.5,...
                'Color', [1, 1, 1]*0.5  );
            for i = 1:numel(hLine)
                set(get(get(hLine(i),'Annotation'),'LegendInformation'),...
                    'IconDisplayStyle','off'); % Exclude line from legend
            end
            hold(this.graph,'on');
            %%% Plot axes isocurves
            % Radial offset per axis
            th = (2*pi/M)*(ones(9,1)*(M:-1:1));
            th = repmat(th_row_red, 9,1);
            % Axis start and end
            r = (linspace(0.1, 0.9, 9)')*ones(1,M);
            % Conversion to cartesian coordinates to plot using regular plot.
            [x,y] = pol2cart(th, r);
            hLine = line(this.graph,[x, x(:,1)]', [y, y(:,1)]',...
                'LineWidth', 1,...
                'Color', [1, 1, 1]*0.5  );
            for i = 1:numel(hLine)
                set(get(get(hLine(i),'Annotation'),'LegendInformation'),...
                    'IconDisplayStyle','off'); % Exclude line from legend
            end
            %%% Insert axis labels
            % Compute minimum and maximum per axis
            minV = min(P,[],2);
            maxV = max(P,[],2);
            formatSpec = '%.2f';
            fn_units = fieldnames(units);
            half = fix(M/2);
            for j = 1:M
                % Generate the axis label
                value = attributes{j};
                msg1 = this.m_hash_map(value);
                msg1 = strcat(msg1,':');
                %formatSpec = this.m_hash_map_format(value);
                const = this.m_hash_map_const(value);
                msg2 = strcat(num2str(const*minV(j),formatSpec),{' '},'to ',{' '},num2str(const*maxV(j),formatSpec));
                %update units
                value_without_spaces = '';
                words = split(value);
                for i = 1:length(words)
                    word = words{i};
                    word = [upper(word(1)),word(2:end)];
                    value_without_spaces(end+1:end+length(word)) = word;
                end
                if ismember(value_without_spaces,fn_units)
                    unit = units.(value_without_spaces);
                    if (strcmp(unit,'percent'))
                        unit = '%';
                    end
                    msg2 = strcat(msg2,{' '},unit);
                end
                [mx, my] = pol2cart( th(1, j), 1.12);
                msg_final = {msg1,msg2{1}};
                %[mx2, my2] = pol2cart( 0.98*th(1, j), 1.1);
                if (j == 1 || j == half +1)
                text(this.graph,mx, my,msg_final,'HorizontalAlignment', 'center', ...
                    'VerticalAlignment', 'middle');
                elseif (j > 1 && j <= half)
                    text(this.graph,mx, my,msg_final,'HorizontalAlignment', 'left', ...
                    'VerticalAlignment', 'middle');
                else
                    text(this.graph,mx, my, msg_final,'HorizontalAlignment', 'right', ...
                    'VerticalAlignment', 'middle');
                end
                    
            end
%             for j = half+1:M
%                 % Generate the axis label
%                 value = attributes{j};
%                 msg1 = this.m_hash_map(value);
%                 %formatSpec = this.m_hash_map_format(value);
%                 const = this.m_hash_map_const(value);
%                 msg1 = strcat(msg1,':');
%                 msg2 = strcat(num2str(const*minV(j),formatSpec),{' '},'to ',{' '},num2str(const*maxV(j),formatSpec));
%                 %update units
%                 value_without_spaces = '';
%                 words = split(value);
%                 for i = 1:length(words)
%                     word = words{i};
%                     word = [upper(word(1)),word(2:end)];
%                     value_without_spaces(end+1:end+length(word)) = word;
%                 end
%                 if ismember(value_without_spaces,fn_units)
%                     unit = units.(value_without_spaces);
%                     if (~strcmp(unit,'percent'))
%                         msg2 = strcat(msg2,{' '},unit);
%                     end
%                 end
%                 msg_final = {msg1,msg2{1}};
%                 [mx, my] = pol2cart( th(1, j), 1.12);
%                 text(this.graph,mx, my, msg_final,'HorizontalAlignment', 'right', ...
%                     'VerticalAlignment', 'middle');
%             end
            %axis([-1,1,-1,1]*1.5)
            % Hold on to plot data points
            % Radius
            R = 0.8*( P  ./((maxV)*ones(1,N))) + 0.1;
            R = [R; R(1,:)];
            %Th = (2*pi/M) * ((M:-1:0)'*ones(1,N));
            Th = repmat(th_row, N,1)';
            % polar(Th, R)
            [X, Y] = pol2cart(Th, R);
            plot(this.graph,X, Y, 'o:', 'LineWidth', 2.5, 'MarkerFaceColor', [0,0,0]);
            legend(this.graph,players{:}, 'Position',[0 0.03 0.3 0.13]);
            % axis(this.graph,[-1,1,-1,1])
            set(this.graph, 'Color', 'none');
            
            hold(this.graph,'off');
        end
        function Reset(this)
            cla(this.graph, 'reset')
            this.graph.Toolbar.Visible = 'off';
            this.graph.Interactions = [];
            this.graph.XAxis.Visible = 'off';
            this.graph.YAxis.Visible = 'off';
            this.table.RowName = [];
            this.table.ColumnName = [];
            this.table.Data = [];
            disableDefaultInteractivity(this.graph);
        end
        function BuildHashMap(this)
            key_set = {'Tempo Jogado',...
                'Pontos',...
                'Faltas',...
                'Faltas Cometidas',...
                'Faltas TÃ©cnicas',...
                'Faltas Ofensivas',...
                'Faltas Antidesportivas',...
                'AssistÃªncias',...
                'Plus/Minus',...
                'Turnovers',...
                'Bloqueios',...
                'Double Doubles',...
                'Triple Doubles',...
                'Rebotes',...
                'Rebotes Ofensivos',...
                'Rebotes Defensivos',...
                'Pontos de Dois',...
                'Aproveitamento de 2 Pontos',...
                'Tentativas de 2 Pontos',...
                'Lances Livres',...
                'Aproveitamento de Lances Livres',...
                'Tentativas de Lances Livres',...
                'Pontos de TrÃªs',...
                'Tentativas de 3 Pontos',...
                'Aproveitamento de 3 Pontos',...
                'Enterradas',...
                'Aproveitamento de Enterradas',...
                'Tentativas de Enterradas',...
                'Arremessos Convertidos',...
                'Aproveitamento de Arremessos',...
                'Tentativas de Arremessos',...
                'Pontos Convertidos no GarrafÃ£o',...
                'Aproveitamento de Pontos no GarrafÃ£o',...
                'Tentativas de Pontos no GarrafÃ£o',...
                'EficiÃªncia',...
                'Bolas Recuperadas',...
                'Arremessos',...
                'Aproveitamento de Arremessos',...
                'Tentativas de Arremessos',...
                'ViolaÃ§Ãµes',...
                'ViolaÃ§Ãµes de 3s',...
                'ViolaÃ§Ãµes de 5s',...
                'ViolaÃ§Ãµes de 8s',...
                'ViolaÃ§Ãµes de 24s',...
                'ViolaÃ§Ãµes de Andada',...
                'ViolaÃ§Ãµes de SaÃ­da de Campo',...
                'ViolaÃ§Ãµes de Retorno de Campo',...
                'ViolaÃ§Ãµes de ConduÃ§Ã£o',...
                'ViolaÃ§Ãµes de InterceptaÃ§Ã£o',...
                };
            value_set = {'Tempo Jogado',...
                'Pontos',...
                'Faltas',...
                'Faltas Cometidas',...
                'Faltas TÃ©cnicas',...
                'Faltas Ofensivas',...
                'Faltas Antidesportivas',...
                'AssistÃªncias',...
                'Plus/Minus',...
                'Turnovers',...
                'Bloqueios',...
                'Double Doubles',...
                'Triple Doubles',...
                'Rebotes',...
                'Rebotes Ofensivos',...
                'Rebotes Defensivos',...
                'Pontos de Dois',...
                '% de 2 Pontos',...
                'Tentativas de 2 Pontos',...
                'Lances Livres',...
                '% de Lances Livres',...
                'Tentativas de Lances Livres',...
                'Pontos de TrÃªs',...
                'Tentativas de 3 Pontos',...
                '% de 3 Pontos',...
                'Enterradas',...
                '% de Enterradas',...
                'Tentativas de Enterradas',...
                'Arremessos Convertidos',...
                '% de Arremessos',...
                'Tentativas de Arremessos',...
                'Pontos Convertidos no GarrafÃ£o',...
                '% de Pontos no GarrafÃ£o',...
                'Tentativas de Pontos no GarrafÃ£o',...
                'EficiÃªncia',...
                'Steals',...
                'Arremessos',...
                '% de Arremessos',...
                'Tentativas de Arremessos',...
                'ViolaÃ§Ãµes',...
                'ViolaÃ§Ãµes de 3s',...
                'ViolaÃ§Ãµes de 5s',...
                'ViolaÃ§Ãµes de 8s',...
                'ViolaÃ§Ãµes de 24s',...
                'ViolaÃ§Ãµes de Andada',...
                'ViolaÃ§Ãµes de SaÃ­da de Campo',...
                'ViolaÃ§Ãµes de Retorno de Campo',...
                'ViolaÃ§Ãµes de ConduÃ§Ã£o',...
                'ViolaÃ§Ãµes de InterceptaÃ§Ã£o',...
                };
            value_set_format = {
                '%.1f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.1f',...
                '%.0f',...
                '%.0f',...
                '%.1f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.1f',...
                '%.0f',...
                '%.1f',...
                '%.0f',...
                '%.0f',...
                '%.1f',...
                '%.0f',...
                '%.0f',...
                '%.1f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.1f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                '%.0f',...
                };
            value_set_const = {
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                100,...
                1,...
                1,...
                100,...
                1,...
                1,...
                1,...
                100,...
                1,...
                100,...
                1,...
                1,...
                100,...
                1,...
                1,...
                100,...
                1,...
                1,...
                1,...
                1,...
                100,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                1,...
                };
            this.m_hash_map = containers.Map(key_set,value_set);
            this.m_hash_map_format = containers.Map(key_set,value_set_format);
            this.m_hash_map_const = containers.Map(key_set,value_set_const);
        end
    end
end